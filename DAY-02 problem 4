Q--> SORT COLOURS (DUTCH NATIONAL FLAG ALGO)
class Solution {
    public void sortColors(int[] nums) {
        
        int low=0;
        int mid=0;
        int high=nums.length-1;

        while(mid<=high){
            // System.out.println(nums[low]+"-"+nums[mid]+"-"+nums[high]);
            if(nums[mid]==0){
                int t=nums[low];
                nums[low]=nums[mid];
                nums[mid]=t;
                low++;mid++;
            }else if(nums[mid]==1){
                mid++;
            }else if(nums[mid]==2){
                int t=nums[high];
                nums[high]=nums[mid];
                nums[mid]=t;
                high--;
            }
        }
    }
}

Q--> PRINT DUPLICTE CHARACTER IN A STRING
Using HashMap

Q--> MIN. MOVES TO EQUAL ARRAY ELEMENTS  (QUICK SELECTION METHOD IS ALSO THERE)
class Solution {
    public int minMoves2(int[] nums) {
        Arrays.sort(nums);
        int mid=nums[nums.length/2];
        int opr=0;
        for(int n:nums){
            opr+=(Math.abs(n-mid));
        }
        return opr;
    }
}

Q--> TOP K FREQUENT ELEMENTS
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        
        HashMap<Integer,Integer> count=new HashMap<>();
        for(int n:nums){
            count.put(n,count.getOrDefault(n,1)+1);
        }

        Queue<Integer> heap = new PriorityQueue<>(
            (n1, n2) -> count.get(n1) - count.get(n2));

        for (int n: count.keySet()) {
          heap.add(n);
          if (heap.size() > k) heap.poll();    
        }

        System.out.println(heap);

        int[] top = new int[k];
        for(int i = k - 1; i >= 0; --i) {
            top[i] = heap.poll();
        }
        return top;
    }
}
